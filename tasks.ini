# vim: set fenc=utf-8 ft=dosini:
# define a new task named "file-build"
#[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
#command=gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"

# working directory, can change to $(VIM_ROOT) for project root
#cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
#output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
#errorformat=%f:%l:%m

# save file before execute
#save=1

# $(VIM_FILEPATH)    # 当前 buffer 的文件名全路径
# $(VIM_FILENAME)    # 当前 buffer 的文件名（没有前面的路径）
# $(VIM_FILEDIR)     # 当前 buffer 的文件所在路径
# $(VIM_FILEEXT)     # 当前 buffer 的扩展名
# $(VIM_FILENOEXT)   # 当前 buffer 的主文件名（没有前面路径和后面扩展名）
# $(VIM_PATHNOEXT)   # 带路径的主文件名（$VIM_FILEPATH 去掉扩展名）
# $(VIM_CWD)         # 当前 Vim 目录（:pwd 命令返回的）
# $(VIM_RELDIR)      # 相对于当前路径的文件名
# $(VIM_RELNAME)     # 相对于当前路径的文件路径
# $(VIM_ROOT)        # 当前 buffer 的项目根目录
# $(VIM_CWORD)       # 光标下的单词
# $(VIM_CFILE)       # 光标下的文件名
# $(VIM_CLINE)       # 光标停留在当前文件的多少行（行号）
# $(VIM_GUI)         # 是否在 GUI 下面运行？
# $(VIM_VERSION)     # Vim 版本号
# $(VIM_COLUMNS)     # 当前屏幕宽度
# $(VIM_LINES)       # 当前屏幕高度
# $(VIM_SVRNAME)     # v:servername 的值
# $(VIM_DIRNAME)     # 当前文件夹目录名，比如 vim 在 ~/github/prj1/src，那就是 src
# $(VIM_PRONAME)     # 当前项目目录名，比如项目根目录在 ~/github/prj1，那就是 prj1
# $(VIM_INIFILE)     # 当前任务的 ini 文件名
# $(VIM_INIHOME)     # 当前任务的 ini 文件的目录（方便调用一些和配置文件位置相关的脚本）

[file-run]
command="$(VIM_FILEPATH)"
command:c=:gcc-11 % -o %< && ./%<
command:cpp=g++  -std=c++17 -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out" && "$(VIM_FILEDIR)/a.out"
command:go=go run $(VIM_FILENAME)
command:python=python3 "$(VIM_FILENAME)"
command:java=javac "$(VIM_FILEPATH)" && java "$(VIM_FILENOEXT)" && rm "$(VIM_PATHNOEXT).class"
command:javascript=node "$(VIM_FILENAME)"
command:sh=bash "$(VIM_FILENAME)"
command:typescript=ts-node "$(VIM_FILEPATH)"
command:lua=:luafile %
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:markdown=:MarkdownPreview
command:vim=:source%
# output=quickfix
output=terminal
cwd=$(VIM_FILEDIR)
# 如果你想在打开新分屏终端的时候保持你的焦点不改变，可以将focus设置为0
focus=1
notify=echo
save=2

# runcode by floaterm
[file-run-floaterm]
command="$(VIM_FILEPATH)"
command:c=:FloatermNew --autoclose=0 gcc-11 % -o %< && ./%<
command:cpp=:FloatermNew --autoclose=0 g++  -std=c++17 -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out" && "$(VIM_FILEDIR)/a.out"
command:go=:FloatermNew --autoclose=0 go run "$(VIM_FILENAME)"
command:python=:FloatermNew --autoclose=0 python3 "$(VIM_FILENAME)"
command:java=:FloatermNew --autoclose=0 javac "$(VIM_FILEPATH)" && java "$(VIM_FILENOEXT)" && rm "$(VIM_PATHNOEXT).class"
command:javascript=:FloatermNew --autoclose=0 node "$(VIM_FILENAME)"
command:typescript=:FloatermNew --autoclose=0 ts-node "$(VIM_FILEPATH)"
command:sh=:FloatermNew --autoclose=0 bash "$(VIM_FILENAME)"
command:lua=:FloatermNew --autoclose=0 lua "$VIM_FILENAME"
command:perl=:FloatermNew --autoclose=0 perl "$(VIM_FILENAME)"
command:ruby=:FloatermNew --autoclose=0 ruby "$(VIM_FILENAME)"
command:markdown=:MarkdownPreview
command:vim=:source%
output=terminal
pos=hide
cwd=$(VIM_FILEDIR)
focus=1
notify=echo
save=2

# Press alt b to open it in a browser
[Application]
command:html=open -a Google\ Chrome "$(VIM_FILENAME)"
command:markdown=:MarkdownPreview
; command:markdown=open -a Google\ Chrome "$(VIM_FILENAME)"
focus=0
notify=echo
output=terminal
pos=hide
